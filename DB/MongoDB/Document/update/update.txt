---------------------------------------------------------------------------------------------------------------------

Syntax:

db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>,
     collation: <document>,
     arrayFilters: [ <filterdocument1>, ... ],
     hint:  <document|string>        // Available starting in MongoDB 4.2
   }
)

--------------------------------------------------------------------------------------------------------------------

Input
{
    "_id" : 1,
    "item" : "TBD",
    "stock" : 0,
    "info" : { "publisher" : "1111", "pages" : 430 },
    "tags" : [ "technology", "computer" ],
    "ratings" : [ { "by" : "ijk", "rating" : 4 }, { "by" : "lmn", "rating" : 5 } ],
    "reorder" : false
   },
   {
    "_id" : 2,
    "item" : "XYZ123",
    "stock" : 15,
    "info" : { "publisher" : "5555", "pages" : 150 },
    "tags" : [ ],
    "ratings" : [ { "by" : "xyz", "rating" : 5 } ],
    "reorder" : false
   }


---------------------------------------------------------------------------------------------------------------------	
	
	Examples

---------------------------------------------------------------------------------------------------------------------

db.books.update(
   { _id: 1 },
   {
     $inc: { stock: 5 },
     $set: {
       item: "ABC123",
       "info.publisher": "2222",
       tags: [ "software" ],
       "ratings.1": { by: "xyz", rating: 3 }
     }
   }
)

In this operation:

The <query> parameter of { _id: 1 } specifies which document to update,
the $inc operator increments the stock field, and
the $set operator replaces the value of the
item field,
publisher field in the info embedded document,
tags field, and
second element in the ratings array.

This operation corresponds to the following SQL statement:

UPDATE books
SET    stock = stock + 5
       item = "ABC123"
       publisher = 2222
       pages = 430
       tags = "software"
       rating_authors = "ijk,xyz"
       rating_values = "4,3"
WHERE  _id = 1


---------------------------------------------------------------------------------------------------------------------	
	
	INSERT A NEW DOCUMENT IF NO MATCH EXISTS (UPSERT)

---------------------------------------------------------------------------------------------------------------------

When you specify the option upsert: true:

If document(s) match the query criteria, db.collection.update() performs an update.
If no document matches the query criteria, db.collection.update() inserts a single document.

Example
---------

db.books.update(
   { item: "ZZZ135" },   // Query parameter
   {                     // Replacement document
     item: "ZZZ135",
     stock: 5,
     tags: [ "database" ]
   },

   { upsert: true }      // Options

)

If no document matches the <query> parameter, the update operation inserts a document with only the replacement document. 
Because no _id field was specified in the replacement document or query document, the operation creates a new unique 
ObjectId for the new documentâ€™s _id field. You can see the upsert reflected in the WriteResult of the operation:

---------------------------------------------------------------------------------------------------------------------	
	
	UPDATE WITH AGGREGATION PIPELINE (4.2)

---------------------------------------------------------------------------------------------------------------------

{ "_id" : 1, "member" : "abc123", "status" : "A", "points" : 2, "misc1" : "note to self: confirm status", 
"misc2" : "Need to activate", "lastUpdate" : ISODate("2019-01-01T00:00:00Z") },
{ "_id" : 2, "member" : "xyz123", "status" : "A", "points" : 60, "misc1" : "reminder: ping me at 100pts", 
"misc2" : "Some random comment", "lastUpdate" : ISODate("2019-01-01T00:00:00Z") }

Starting in MongoDB 4.2, the db.collection.update() method can accept an aggregation pipeline 
[ <stage1>, <stage2>, ... ] that specifies the modifications to perform. The pipeline can consist of the following stages:

$addFields and its alias $set
$project and its alias $unset
$replaceRoot and its alias $replaceWith.

Using the aggregation pipeline allows for a more expressive update statement, such as expressing conditional updates 
based on current field values or updating one field using the value of another field(s).

Modify a Field Using the Values of the Other Fields in the Document
--------------------------------------------------------------------

Assume that instead of separate misc1 and misc2 fields, you want to gather these into a new comments field. 

The following update operation uses an aggregation pipeline to:

add the new comments field and set the lastUpdate field.
remove the misc1 and misc2 fields for all documents in the collection.


Example
---------

db.members.update(
   { },
   [
      { $set: { status: "Modified", comments: [ "$misc1", "$misc2" ], lastUpdate: "$$NOW" } },
      { $unset: [ "misc1", "misc2" ] }
   ],
   { multi: true }
)

First Stage
------------

The $set stage:

creates a new array field comments whose elements are the current content of the misc1 and misc2 fields and
sets the field lastUpdate to the value of the aggregation variable NOW. The aggregation variable NOW resolves to the current datetime value and remains the same throughout the pipeline. To access aggregation variables, prefix the variable with double dollar signs $$ and enclose in quotes.

Second Stage
-------------

The $unset stage removes the misc1 and misc2 fields.





---------------------------------------------------------------------------------------------------------------------	
	
	PERFORM CONDITIONAL UPDATES BASED ON CURRENT FIELD VALUES

---------------------------------------------------------------------------------------------------------------------

{ "_id" : 1, "tests" : [ 95, 92, 90 ], "lastUpdate" : ISODate("2019-01-01T00:00:00Z") },
{ "_id" : 2, "tests" : [ 94, 88, 90 ], "lastUpdate" : ISODate("2019-01-01T00:00:00Z") },
{ "_id" : 3, "tests" : [ 70, 75, 82 ], "lastUpdate" : ISODate("2019-01-01T00:00:00Z") }


Example
---------

db.students3.update(
   { },
   [
     { $set: { average : { $trunc: [ { $avg: "$tests" }, 0 ] }, lastUpdate: "$$NOW" } },
     { $set: { grade: { $switch: {
                           branches: [
                               { case: { $gte: [ "$average", 90 ] }, then: "A" },
                               { case: { $gte: [ "$average", 80 ] }, then: "B" },
                               { case: { $gte: [ "$average", 70 ] }, then: "C" },
                               { case: { $gte: [ "$average", 60 ] }, then: "D" }
                           ],
                           default: "F"
     } } } }
   ],
   { multi: true }
)

First Stage
------------

The $set stage:

calculates a new field average based on the average of the tests field. See $avg for more information on the 
$avg aggregation operator and $trunc for more information on the $trunc truncate aggregation operator.

sets the field lastUpdate to the value of the aggregation variable NOW. The aggregation variable NOW 
resolves to the current datetime value and remains the same throughout the pipeline. 

To access aggregation variables, prefix the variable with double dollar signs $$ and enclose in quotes.

Second Stage
-------------

The $set stage calculates a new field grade based on the average field calculated in the previous stage. 

---------------------------------------------------------------------------------------------------------------------	
	
	ARRAYFILTERS FOR ARRAY UPDATE OPERATIONS

---------------------------------------------------------------------------------------------------------------------

In the update document, use the $[<identifier>] filtered positional operator to define an identifier, which you 
then reference in the array filter documents. You cannot have an array filter document for an identifier if the
identifier is not included in the update document.

NOTE

The <identifier> must begin with a lowercase letter and contain only alphanumeric characters.

Example
---------

// Example 1
[
  { $or: [{"x.a": {$gt: 85}}, {"x.b": {$gt: 80}}] }
]

// Example 2
[
  { $and: [{"x.a": {$gt: 85}}, {"x.b": {$gt: 80}}] }
]

// Example 3
[
  { "x.a": { $gt: 85 }, "x.b": { $gt: 80 } }
]

---------------------------------------------------------------------------------------------------------------------	
	
	UPDATE ELEMENTS MATCH ARRAYFILTERS CRITERIA

---------------------------------------------------------------------------------------------------------------------

{ "_id" : 1, "grades" : [ 95, 92, 90 ] },
{ "_id" : 2, "grades" : [ 98, 100, 102 ] },
{ "_id" : 3, "grades" : [ 95, 110, 100 ] }


Example
---------

To update all elements that are greater than or equal to 100 in the grades array, use the filtered 
positional operator $[<identifier>] with the arrayFilters option:

db.students.update(
   { grades: { $gte: 100 } },
   { $set: { "grades.$[element]" : 100 } },
   {
     multi: true,
     arrayFilters: [ { "element": { $gte: 100 } } ]
   }
)

---------------------------------------------------------------------------------------------------------------------	
	
	UPDATE SPECIFIC ELEMENTS OF AN ARRAY OF DOCUMENTS

---------------------------------------------------------------------------------------------------------------------

{
    "_id" : 1,
    "grades" : [
       { "grade" : 80, "mean" : 75, "std" : 6 },
       { "grade" : 85, "mean" : 90, "std" : 4 },
       { "grade" : 85, "mean" : 85, "std" : 6 }
    ]
  }
  {
     "_id" : 2,
     "grades" : [
        { "grade" : 90, "mean" : 75, "std" : 6 },
        { "grade" : 87, "mean" : 90, "std" : 3 },
        { "grade" : 85, "mean" : 85, "std" : 4 }
     ]
  }

Example
---------

db.students2.update(
   { },
   { $set: { "grades.$[elem].mean" : 100 } },
   {
     multi: true,
     arrayFilters: [ { "elem.grade": { $gte: 85 } } ]
   }
)