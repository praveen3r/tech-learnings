---------------------------------------------------------------------------------------------------------------------

cursor.skip(<offset>)


Call the cursor.skip() method on a cursor to control where MongoDB begins returning results. 
This approach may be useful in implementing paginated results.

---------------------------------------------------------------------------------------------------------------------	
	
	PAGINATION EXAMPLE

---------------------------------------------------------------------------------------------------------------------

The following JavaScript function uses cursor.skip() to paginate a collection in natural order:

function printStudents(pageNumber, nPerPage) {
  print( "Page: " + pageNumber );
  db.students.find()
             .skip( pageNumber > 0 ? ( ( pageNumber - 1 ) * nPerPage ) : 0 )
             .limit( nPerPage )
             .forEach( student => {
               print( student.name );
             } );
}

The cursor.skip() method requires the server to scan from the beginning of the input results set before 
beginning to return results. As the offset increases, cursor.skip() will become slower.


---------------------------------------------------------------------------------------------------------------------	
	
	USING RANGE QUERIES

---------------------------------------------------------------------------------------------------------------------

Range queries can use indexes to avoid scanning unwanted documents, typically yielding better performance as the 
offset grows compared to using cursor.skip() for pagination.

Descending Order
-----------------

Use this procedure to implement pagination with range queries:

Choose a field such as _id which generally changes in a consistent direction over time and has a unique index 
to prevent duplicate values,

Query for documents whose field is less than the start value using the $lt and cursor.sort() operators, and
Store the last-seen field value for the next query.

For example, the following function uses the above procedure to print pages of student names from a collection, 
sorted approximately in order of newest documents first using the _id field (that is, in descending order):

function printStudents(startValue, nPerPage) {
  let endValue = null;
  db.students.find( { _id: { $lt: startValue } } )
             .sort( { _id: -1 } )
             .limit( nPerPage )
             .forEach( student => {
               print( student.name );
               endValue = student._id;
             } );

  return endValue;
}

Ascending Order
-----------------

Returning paginated results in ascending order is similar to the previous, but uses $gt with an ascending sort order:

function printStudents(startValue, nPerPage) {
  let endValue = null;
  db.students.find( { _id: { $gt: startValue } } )
             .sort( { _id: 1 } )
             .limit( nPerPage )
             .forEach( student => {
               print( student.name );
               endValue = student._id;
             } );

  return endValue;
}