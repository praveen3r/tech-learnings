---------------------------------------------------------------------------------------------------------------------

{ _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] },
{ _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] },
{ _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] },
{ _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] },
{ _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }

---------------------------------------------------------------------------------------------------------------------	
	
	$and

---------------------------------------------------------------------------------------------------------------------

Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.

cmd: { $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }

Example
---------

db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

This query will select all documents in the inventory collection where:

the price field value is not equal to 1.99 and
the price field exists.

implicit AND
------------------------------

This query can be also be constructed with an implicit AND operation by combining the operator expressions 
for the price field
db.inventory.find( { price: { $ne: 1.99, $exists: true } } )

---------------------------------------------------------------------------------------------------------------------	
	
	$not

---------------------------------------------------------------------------------------------------------------------

Inverts the effect of a query expression and returns documents that do not match the query expression.

cmd: { field: { $not: { <operator-expression> } } }

Example
---------

db.inventory.find( { price: { $not: { $gt: 1.99 } } } )

This query will select all documents in the inventory collection where:

the price field value is less than or equal to 1.99 or
the price field does not exist

{ $not: { $gt: 1.99 } } is different from the $lte operator. { $lte: 1.99 } returns only the documents 
where price field exists and its value is less than or equal to 1.99.

Remember that the $not operator only affects other operators and cannot check fields and documents independently. 
So, use the $not operator for logical disjunctions and the $ne operator to test the contents of fields directly.

regular expression objects
-----------------------------

db.inventory.find( { item: { $not: /^p.*/ } } )

	selects all documents in the inventory collection where the item field value does not start with the letter p

$regex operator expression (Starting in MongoDB 4.0.7)
--------------------------------------------------------

db.inventory.find( { item: { $not: { $regex: "^p.*" } } } )
db.inventory.find( { item: { $not: { $regex: /^p.*/ } } } )



---------------------------------------------------------------------------------------------------------------------	
	
	$nor

---------------------------------------------------------------------------------------------------------------------

Joins query clauses with a logical NOR returns all documents that fail to match both clauses.

cmd: { $nor: [ { <expression1> }, { <expression2> }, ...  { <expressionN> } ] }

Example
---------

db.inventory.find( { $nor: [ { price: 1.99 }, { sale: true } ]  } )

This query will return all documents that:

contain the price field whose value is not equal to 1.99 and contain the sale field whose value is not equal to true or
contain the price field whose value is not equal to 1.99 but do not contain the sale field or
do not contain the price field but contain the sale field whose value is not equal to true or
do not contain the price field and do not contain the sale field

$nor and $exists
-----------------

db.inventory.find( { $nor: [ { price: 1.99 }, { price: { $exists: false } },
                             { sale: true }, { sale: { $exists: false } } ] } )

This query will return all documents that:

contain the price field whose value is not equal to 1.99 and contain the sale field whose value is not equal to true

---------------------------------------------------------------------------------------------------------------------	
	
	$or

---------------------------------------------------------------------------------------------------------------------

Joins query clauses with a logical OR returns all documents that match the conditions of either clause.

cmd: { $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }

Example
---------

db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )


$or versus $in
--------------------------------------

When using $or with <expressions> that are equality checks for the value of the same field, 
use the $in operator instead of the $or operator.

For example, to select all documents in the inventory collection where the quantity field value equals 
either 20 or 50, 

use the $in operator:

db.inventory.find ( { quantity: { $in: [20, 50] } } )

---------------------------------------------------------------------------------------------------------------------	
	
	MULTIPLE EXPRESSIONS

---------------------------------------------------------------------------------------------------------------------

db.inventory.find( {
    $and: [
        { $or: [ { qty: { $lt : 10 } }, { qty : { $gt: 50 } } ] },
        { $or: [ { sale: true }, { price : { $lt : 5 } } ] }
    ]
} )

This query will select all documents where:

the qty field value is less than 20 or greater than 50, and
the sale field value is equal to true or the price field value is less than 5.
This query cannot be constructed using an implicit AND operation, because it uses the $or operator more than once.